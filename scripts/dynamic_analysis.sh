#!/bin/bash
#set -e

INPUT_APK=""
AVD_IMAGE=""
NUM=750
OUTPUT_FOLDER="output"
START_DELAY="60"
DELAY=50
AUTH_TOKEN=$(cat "$HOME/.emulator_console_auth_token" | tr -d '\r\n')
TEL_HOST=localhost
# the default port for the first emulator launched is 5554, next is 5555 etc..
TEL_PORT=5554

ADB=$(which adb)
echo "adb:$ADB"

check_commands() {
	if ! type "aapt" >/dev/null; then
		echo "aapt not found. Add Android/build-tools to PATH"
		exit 1
	fi
	if ! type "adb" >/dev/null; then
		echo "adb not found. Add Android/tools to PATH"
		exit 1
	fi
	if ! type "emulator" >/dev/null; then
		echo "android emulator not found."
		exit 1
	fi
	if [ -z "${ANDROID_HOME}" ]; then
		echo "ANDROID_HOME not set."
		exit 1
	fi
}
usage() {
	echo "Usage: $0 [-i input_apk] [-o output_folder] [-a avd_image] [-n num_actions]" 1>&2
	exit 0
}
timestamp() {
	date +"%T"
}

clean() {
	#clean environment
	EM=$("$ADB" devices | grep emulator | cut -f1 2>/dev/null)
	while read -r line; do
		"$ADB" -s "$line" "emu" kill >/dev/null 2>&1
	done <<<"$EM"
}

while getopts ":i:o:a:n:h" opt; do
	case "${opt}" in
	i)
		INPUT_APK=${OPTARG}
		;;
	a)
		AVD_IMAGE=${OPTARG}
		;;
	o)
		OUTPUT_FOLDER=${OPTARG}
		;;
	n)
		NUM=${OPTARG}
		;;
	*)
		usage #Help
		;;
	esac
done
shift $((OPTIND - 1))

net_stats() {
	local FLAG=true
	local TIME_INT="0.5"
	local IO=""

	while $FLAG; do
		sleep "$TIME_INT"
		PID=$1
		# get network usage
		IO=$(adb shell cat "proc/$PID/net/dev" | grep eth0 | tr -s ' ')
		if [ -z "$IO" ]; then
			FLAG=false
			continue
		fi
		# received
		local REC=$(echo "$IO" | cut -d ' ' -f 3)
		# sent
		local SENT=$(echo "$IO" | cut -d ' ' -f 11)
		echo "$REC,$SENT" >>"${2}.net.txt"
	done
}

echo $AVD_IMAGE
echo $OUTPUT_FOLDER
echo $INPUT_APK

#check existance output dir
if [ ! -d "$OUTPUT_FOLDER" ]; then
	mkdir -p "$OUTPUT_FOLDER"
fi
mkdir -p "$OUTPUT_FOLDER/sys"
mkdir -p "$OUTPUT_FOLDER/net"
mkdir -p "$OUTPUT_FOLDER/traces"

if [ ! -f "$INPUT_APK" ]; then
	echo "Apk not found: $INPUT_APK"
	clean
	exit 1
fi

check_commands

PKG_NAME=$(aapt dump badging "$INPUT_APK")
PKG_NAME=$(echo "$PKG_NAME" | grep -oP "(?<=package: name=')[^']*")
FILENAME=$(basename "$INPUT_APK")
echo "$FILENAME"

#clean starting env
"$ADB" kill-server >/dev/null 2>&1
"$ADB" start-server >/dev/null 2>&1

#Have problems running the emulator outside of the $ANDROID_HOME/tools folder
cd "$ANDROID_HOME/tools"

echo "starting emulator $(timestamp)"
#run android emulator and detach
#$(which emulator) -avd $AVD_IMAGE -no-skin -no-audio -no-window -no-snapshot -debug-no-all -logcat '*:s' -wipe-data > /dev/null 2>&1 &

"$(which emulator)" -avd "$AVD_IMAGE" -no-snapshot -wipe-data -debug-no-all -logcat '*:s' >/dev/null 2>&1 &

# return to starting folder after launching the emulator
cd -

# wait for emulator start
COUNT=0
while [ "$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')" != "1" ]; do
	sleep 5
	COUNT=$((COUNT + 1))
	if [ "$COUNT" -eq "$START_DELAY" ]; then
		echo "Can't boot image"
		exit 1
	fi
done

sleep 5

# sleep "${START_DELAY}"

#install selected apk
RES=$("$ADB" -e install "$INPUT_APK")
RES=$(echo "$RES" | tail -n1)

if [[ $RES == *"Success"* ]]; then
	echo "Install result: $RES"
else
	echo "Error installing apk"
	echo "Install result: $RES"
	echo "$INPUT_APK" >>"failed_installed.txt"
	clean
	exit 1
fi

#generate random seed (bash function)
SEED=$RANDOM
echo "rand seed: $SEED"

# get zygote process
#ZPID=$("$ADB" shell ps | grep -w -m1 "zygote" | awk '{print $2}')
#echo "ZPID:$ZPID"

TRACE_FILE="${OUTPUT_FOLDER}/traces/${FILENAME}_trace.txt"

#"$ADB" shell strace -f -p "$ZPID" >"$TRACE_FILE" &
#"$ADB" shell strace -f -p "${ZPID}" >"$TRACE_FILE" &

# adb shell monkey -p ${PKG_NAME} 1 >/dev/null 2>&1 &

# clean net io file
truncate -s 0 "${OUTPUT_FOLDER}/net/${FILENAME}.net.txt"

# First monkey run
"$ADB" shell monkey -p "$PKG_NAME" -s "$SEED" -v --throttle ${DELAY} "$NUM" >/dev/null 2>&1 &
# wait for process start
sleep 1

PID=$("$ADB" shell ps | grep -w -m1 "${PKG_NAME}" | awk '{print $2}')
"$ADB" shell strace -f -p "$PID" >"$TRACE_FILE" &

echo "PID:$PID"

if [ -z "$PID" ]; then
	echo "Pid not found"
	clean
	exit 1
fi

# monitor network usage
net_stats "${PID}" "${OUTPUT_FOLDER}/net/${FILENAME}" &

sleep 40

echo "Making call.."
# make call
{
	echo "auth $AUTH_TOKEN"
	echo "gsm call 555123456"
	sleep 10
} | telnet ${TEL_HOST} ${TEL_PORT} >/dev/null 2>&1 &

"$ADB" shell monkey -p "$PKG_NAME" -s "$SEED" -v --throttle "$DELAY" "$NUM" >/dev/null 2>&1

echo "Sending SMS..."
# send sms
{
	echo "auth $AUTH_TOKEN"
	echo "sms send 40851555 password: 123helloworld"
	sleep 10
} | telnet ${TEL_HOST} ${TEL_PORT} >/dev/null 2>&1 &

"$ADB" shell monkey -p "$PKG_NAME" -s "$SEED" -v --throttle "$DELAY" "$NUM" >/dev/null 2>&1

echo "Changing geo location"

# move position
{
	echo "auth $AUTH_TOKEN"
	echo "geo fix 0 51 10"
	sleep 10
} | telnet ${TEL_HOST} ${TEL_PORT} >/dev/null 2>&1 &

"$ADB" shell monkey -p "$PKG_NAME" -s ${SEED} -v --throttle "$DELAY" "$NUM" >/dev/null 2>&1

echo "Monkey finished"

# close app
"$ADB" shell am force-stop "$PKG_NAME" >/dev/null 2>&1

######### Trace analysis #######
#PID_TRACE="pid_trace_$RANDOM.txt"
# only takes the trace of the selected process
#grep -P "^\[pid  $PID\] .*" "$TRACE_FILE" >"$PID_TRACE"

SYS_CALLS=$(grep -oP "(?<=^\[pid  $PID\] )\w+\(.*(?== [0-9])" "$TRACE_FILE")

echo "$SYS_CALLS" | cut -d '(' -f 1 >"${OUTPUT_FOLDER}/sys/${FILENAME}.sys_names.txt"

#echo "$SYS_CALLS" | cut -d '(' -f 2- | cut -d ')' -f 1 >"${OUTPUT_FOLDER}/${FILENAME}.sys_params.txt"

#cp $TRACE_FILE trace.txt
#cp $PID_TRACE pid_trace.txt

#### Clean up ######
#rm "$TRACE_FILE"
#rm "$PID_TRACE"

echo "Finished collecting data. Cleaning..."

clean

wait

echo "$INPUT_APK done"
