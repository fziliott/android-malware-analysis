from __future__ import print_function
import argparse
import os
import re
import xml.dom.minidom

import androguard.core.bytecodes
from androguard.misc import AnalyzeAPK
from androguard.core.bytecodes.apk import APK

import decode.PScoutMapping as PScoutMapping
import decode.BasicBlockBuilder as BasicBlockAttrBuilder
import decode.BasicBlockAttributeBuilder as BasicBlockAttributeBuilder
import manifest
import ioutil

SENSITIVE_API_FILE = "api_all.txt"

pjoin = os.path.join


def getApkData(apkfile, PMap):
    try:
        DataDictionary = {}
        RequestedPermissionSet = manifest.getManifestFeatures(
            apkfile)[0]
        RequestedPermissionList = list(RequestedPermissionSet)

        UsedPermissions, RestrictedApiSet, SuspiciousApiSet, URLDomainSet = GetFromInstructions(
            apkfile, PMap)
        UsedPermissionsList = list(UsedPermissions)
        RestrictedApiList = list(RestrictedApiSet)
        SuspiciousApiList = list(SuspiciousApiSet)
        URLDomainList = list(URLDomainSet)
        DataDictionary["UsedPermissionsList"] = UsedPermissionsList
        DataDictionary["RestrictedApiList"] = RestrictedApiList
        DataDictionary["SuspiciousApiList"] = SuspiciousApiList
        DataDictionary["URLDomainList"] = URLDomainList

    except Exception as e:
        print(e)
        return apkfile, False
    else:
        print(apkfile + " processed successfully")
        return apkfile, True


def GetFromInstructions(apkfile, PMap):
    SuspiciousApiSet = set()
    URLDomainSet = set()
    UsedPermissionSet = set()
    restrictedApiSet = set()
    apiList = getSentitiveApiList()
    try:
        apkfile = os.path.abspath(apkfile)
        a, d, dx = AnalyzeAPK(apkfile)
    except Exception as e:
        print(e)
        return

    requestedPermission = a.get_permissions()
    print(requestedPermission)
    for method in d[0].get_methods():
        g = dx.get_method(method)
        for BasicBlock in g.get_basic_blocks().get():
            instructions = BasicBlockAttrBuilder.GetBasicBlockDalvikCode(
                BasicBlock)

            calledApis = getApiCalls(instructions)
            for apiCall in calledApis:
                for sApi in apiList:
                    if apiCall in sApi:
                        SuspiciousApiSet.add(sApi)
                        break

                perm = pmap.GetPermFromFullApi(apiCall)
                if(perm != None):
                    UsedPermissionSet.add(perm)
                    if perm not in requestedPermission:
                        restrictedApiSet.add(apiCall)

            for Instruction in instructions:
                URLSearch = re.search(
                    r"https?://([\da-z\.-]+\.[a-z\.]{2, 6}|[\d.]+)[^'\"]*", Instruction, re.IGNORECASE)
                if (URLSearch):
                    URL = URLSearch.group()
                    Domain = re.sub("https?://(.*)", "\g<1>", re.search(
                        r"https?://([^/:\\\\]*)", URL, re.IGNORECASE).group(), 0, re.IGNORECASE)
                    URLDomainSet.add(Domain)

    return SuspiciousApiSet, URLDomainSet, UsedPermissionSet, restrictedApiSet


def getApiCalls(dcList):
    for dalvikCode in dcList:
        # consider only lines with invoke
        if "invoke-" in dalvikCode:
            Parts = dalvikCode.split(",")
            for Part in Parts:
                # ;-> indicates the method invocation
                if ";->" in Part:
                    Part = Part.strip()
                    # split method name and parameters
                    mName = Part.split("(")[0]
                    # for sApi in suspiciousListFilter:
                    #     if mName in sApi:
                    #         sApiSet.add(sApi)
                    #         break
                    yield(mName)
                    # FullApi = Part
                    # ApiParts = FullApi.split(";->")
                    # ApiClass = ApiParts[0].strip()
                    # ApiName = ApiParts[1].split("(")[0].strip()
                    # ApiDetails = {}
                    # ApiDetails['FullApi'] = FullApi
                    # ApiDetails['ApiClass'] = ApiClass
                    # ApiDetails['ApiName'] = ApiName


def getSentitiveApiList(apiFile=SENSITIVE_API_FILE):
    apis = []
    with open(SENSITIVE_API_FILE) as apiFile:
        apis = apiFile.readlines()
        apis = [l.strip('\n') for l in apis]
    return apis


def parseArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--apk', nargs='?', dest='apk')
    parser.add_argument('-o', '--outDir', nargs='?',
                        dest='outputDir', default="output")
    args = parser.parse_args()
    return args


def main():
    args = parseArgs()

    # example
    pmap = PScoutMapping.PScoutMapping()

    getApkData(args.apk, pmap)


if __name__ == "__main__":
    args = parseArgs()
    pmap = PScoutMapping.PScoutMapping()

    api, url, perm, res = GetFromInstructions(args.apk, pmap)

    apiDir = ioutil.dirAbsPath(pjoin(args.outputDir, "apis"))
    urlDir = ioutil.dirAbsPath(pjoin(args.outputDir, "urls"))
    permDir = ioutil.dirAbsPath(pjoin(args.outputDir, "used-permissions"))
    restrictedDir = ioutil.dirAbsPath(pjoin(args.outputDir, "restricted-apis"))

    file = os.path.splitext(os.path.basename(args.apk))[0]

    ioutil.exportToTxt(pjoin(apiDir, file + ".api"), api)
    ioutil.exportToTxt(pjoin(urlDir, file + ".url"), url)
    ioutil.exportToTxt(pjoin(permDir, file + ".used"), perm)
    ioutil.exportToTxt(pjoin(restrictedDir, file + ".restricted"), res)
