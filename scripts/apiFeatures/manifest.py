from __future__ import print_function
import argparse
import os

import androguard.core.bytecodes.apk as andro
from xml.dom import minidom
from lxml import etree
import ioutil

pjoin = os.path.join


def extractXml(apkfile):
    apkName = os.path.splitext(apkfile)[0]
    try:
        a = andro.APK(apkfile)
        xmlFilename = apkName + ".xml"
        f = open(xmlFilename, "wb")
        xml = a.get_android_manifest_xml()
        f.write(etree.tostring(xml, pretty_print=True))

        f.close()
        return xmlFilename
    except Exception as e:
        print(e)
        return None


def getManifestFeatures(apkfile):
    RequestedPermissionSet = set()
    ActivitySet = set()
    ServiceSet = set()
    ContentProviderSet = set()
    BroadcastReceiverSet = set()
    HardwareComponentsSet = set()
    IntentFilterSet = set()

    xmlFilename = extractXml(apkfile)

    with open(xmlFilename) as f:
        try:
            Dom = minidom.parse(f)
            DomCollection = Dom.documentElement

            DomPermission = DomCollection.getElementsByTagName(
                "uses-permission")
            for Permission in DomPermission:
                if Permission.hasAttribute("android:name"):
                    RequestedPermissionSet.add(
                        Permission.getAttribute("android:name"))

            DomActivity = DomCollection.getElementsByTagName("activity")
            for Activity in DomActivity:
                if Activity.hasAttribute("android:name"):
                    ActivitySet.add(Activity.getAttribute("android:name"))

            DomService = DomCollection.getElementsByTagName("service")
            for Service in DomService:
                if Service.hasAttribute("android:name"):
                    ServiceSet.add(Service.getAttribute("android:name"))

            DomContentProvider = DomCollection.getElementsByTagName("provider")
            for Provider in DomContentProvider:
                if Provider.hasAttribute("android:name"):
                    ContentProviderSet.add(
                        Provider.getAttribute("android:name"))

            DomBroadcastReceiver = DomCollection.getElementsByTagName(
                "receiver")
            for Receiver in DomBroadcastReceiver:
                if Receiver.hasAttribute("android:name"):
                    BroadcastReceiverSet.add(
                        Receiver.getAttribute("android:name"))

            DomHardwareComponent = DomCollection.getElementsByTagName(
                "uses-feature")
            for HardwareComponent in DomHardwareComponent:
                if HardwareComponent.hasAttribute("android:name"):
                    HardwareComponentsSet.add(
                        HardwareComponent.getAttribute("android:name"))

            DomIntentFilter = DomCollection.getElementsByTagName(
                "intent-filter")
            DomIntentFilterAction = DomCollection.getElementsByTagName(
                "action")
            for Action in DomIntentFilterAction:
                if Action.hasAttribute("android:name"):
                    IntentFilterSet.add(Action.getAttribute("android:name"))
        except Exception as e:
            print(e)
            f.close()

    return RequestedPermissionSet, ActivitySet, ServiceSet, ContentProviderSet, BroadcastReceiverSet, HardwareComponentsSet, IntentFilterSet


def parseArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--apk', nargs='?', dest='apk')
    parser.add_argument('-o', '--outDir', nargs='?',
                        dest='outputDir', default="output")

    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = parseArgs()
    # example
    RequestedPermissionSet, ActivitySet, ServiceSet, ContentProviderSet, BroadcastReceiverSet, HardwareComponentsSet, IntentFilterSet = getManifestFeatures(
        args.apk)

    permDir = ioutil.dirAbsPath(pjoin(args.outputDir, "permissions"))
    actDir = ioutil.dirAbsPath(pjoin(args.outputDir, "activities"))
    servDir = ioutil.dirAbsPath(pjoin(args.outputDir, "services"))
    contentDir = ioutil.dirAbsPath(pjoin(args.outputDir, "contents"))
    broadcastDir = ioutil.dirAbsPath(pjoin(args.outputDir, "broadcasts"))
    hwDir = ioutil.dirAbsPath(pjoin(args.outputDir, "hardwares"))
    intentDir = ioutil.dirAbsPath(pjoin(args.outputDir, "intents"))

    file = os.path.splitext(os.path.basename(args.apk))[0]

    ioutil.exportToTxt(pjoin(permDir, file + ".permission"), RequestedPermissionSet)
    ioutil.exportToTxt(pjoin(actDir, file + ".activity"), ActivitySet)
    ioutil.exportToTxt(pjoin(servDir, file + ".service"), ServiceSet)
    ioutil.exportToTxt(pjoin(contentDir, file + ".content"), ContentProviderSet)
    ioutil.exportToTxt(pjoin(broadcastDir, file + ".broadcast"), BroadcastReceiverSet)
    ioutil.exportToTxt(pjoin(hwDir, file + ".hardware"), HardwareComponentsSet)
    ioutil.exportToTxt(pjoin(intentDir, file + ".intent"), IntentFilterSet)
