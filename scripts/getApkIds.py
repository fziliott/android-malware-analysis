import sys
import os
import requests
import re
import argparse
from bs4 import BeautifulSoup

storeCategories = ["ART_AND_DESIGN", "AUTO_AND_VEHICLES", "BEAUTY", "BOOKS_AND_REFERENCE", "BUSINESS", "COMICS", "COMMUNICATION", "DATING",
                   "EDUCATION", "ENTERTAINMENT", "EVENTS", "FINANCE", "FOOD_AND_DRINK", "HEALTH_AND_FITNESS", "HOUSE_AND_HOME", "LIBRARIES_AND_DEMO", "LIFESTYLE", "MAPS_AND_NAVIGATION", "MEDICAL", "MUSIC_AND_AUDIO", "NEWS_AND_MAGAZINES", "PARENTING", "PERSONALIZATION", "PHOTOGRAPHY", "PRODUCTIVITY", "SHOPPING", "SOCIAL", "SPORTS", "TOOLS", "TRAVEL_AND_LOCAL", "VIDEO_PLAYERS", "WHEATHER"]


def has_attr_doc(tag):
    return tag.has_attr('data-docid')


def getAll(outputFile, pathFiles, num=200, categories=storeCategories):
    for cat in categories:
        pageFile = pathFiles + cat + '.html'

        try:
            with open(pageFile, 'r') as html:
                soup = BeautifulSoup(html.read(), 'html.parser')
                apps = soup.find_all("span", {"data-docid": re.compile(r".*")})

                count = 1
                for app in apps:
                    outputFile.write(app.get('data-docid')+','+cat+'\n')
                    count = count+1
                    if count > num:
                        break

        except IOError:
            print("Could not read file:" + pageFile)


def getFromPage(outputFile, page):
    html = open(page, 'r')
    soup = BeautifulSoup(html.read(), 'html.parser')
    apps = soup.find_all("span", {"data-docid": re.compile(r".*")})

    for app in apps:
        outputFile.write(app.get('data-docid')+'\n')
    html.close()


def parseArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--num', nargs='?',
                        default=200, type=int, dest='num')
    parser.add_argument('-p', '--page', nargs='?', dest='page')
    parser.add_argument('-i', '--inFolder', nargs='?',
                        default='pages/', dest='pathFiles')
    args = parser.parse_args()
    return args


def getDirPath(p):
    res = ''
    if not os.path.isabs(p):
        curr = os.getcwd()
        res = os.path.join(curr, p)
    else:
        res = os.path.normpath(p) + os.sep
        print(res)
    if os.path.isdir(res):
        return res
    else:
        return None


def main():
    args = parseArgs()

    file = open("apps.csv", "w")
    file.truncate()
    file.write('id' + ',' + 'category\n')

    path = getDirPath(args.pathFiles)
    if path is None:
        print("Path: " + args.pathFiles+" does not exist.")
        exit(1)

    if args.page is None:
        getAll(file, path, args.num, storeCategories)
    else:
        # input a static page
        getFromPage(file, args.page)

    file.close()


if __name__ == "__main__":
    main()
