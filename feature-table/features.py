from __future__ import print_function
import argparse
import table_utils


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input-tables', nargs='*', dest='input_tables')

    args = parser.parse_args()

    return args


def analyze_table(tables):
    counts_mal = dict()
    counts_ben = dict()
    counts_total = dict()

    feature_set = set()
    file_set_mal = set()
    file_set_ben = set()

    for table in tables:
        for key, val in table.items():
            for v in val[table_utils.DATA]:
                feature_set.add(v)
                counts_total[v] = counts_total.get(v, 0) + 1
                if val[table_utils.CLASS] is table_utils.CLASS_MAL:
                    file_set_mal.add(key)
                    counts_mal[v] = counts_mal.get(v, 0) + 1
                if val[table_utils.CLASS] is table_utils.CLASS_BEN:
                    file_set_ben.add(key)
                    counts_ben[v] = counts_ben.get(v, 0) + 1

    s_ben = sorted(counts_ben.items(), key=lambda x: x[1], reverse=True)
    s_mal = sorted(counts_mal.items(), key=lambda x: x[1], reverse=True)
    s_tot = sorted(counts_total.items(), key=lambda x: x[1], reverse=True)

    name = 'api'
    with open(name + '_count_ben.txt', 'w+') as o_file:
        for feature, count in s_ben:
            perc = count/len(file_set_ben)
            o_file.write(str(perc)+","+feature+","+"\n")

    with open(name + '_count_mal.txt', 'w+') as o_file:
        for feature, count in s_mal:
            perc = count/len(file_set_mal)
            o_file.write(str(perc)+","+feature+","+"\n")

    with open(name + '_count_tot.txt', 'w+') as o_file:
        for feature, count in s_tot:
            perc = count/len(file_set_ben.union(file_set_mal))
            o_file.write(str(perc)+","+feature+","+"\n")

    return counts_ben, counts_mal, counts_total


def main():
    args = parse_args()

    tables = []
    for t_files in args.input_tables:
        table, features = table_utils.read_table(t_files)
        tables.append(table)

    c_ben, c_mal, c_tot = analyze_table(tables)


if __name__ == "__main__":
    main()
